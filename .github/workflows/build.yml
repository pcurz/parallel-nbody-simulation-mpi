name: Build, Test, and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*' # Trigger on version tags like v1.0, v2.0, etc.
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Install dependencies
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y cmake mpich

      # Configure and build the project
      - name: Build with CMake
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make

      # Run a basic test to verify the executable works
      - name: Run basic test
        run: |
          mpirun -np 2 ./build/parallel_nbody 12 /dev/null /dev/null

      # Upload Build Artifacts (optional)
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: parallel_nbody
          path: build/parallel_nbody

  release:
    # This job runs only when a new tag is pushed
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y cmake mpich

      - name: Build with CMake
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make

      # Package input data and results directory
      - name: Package data and results
        run: |
          mkdir release_package
          cp -r data release_package/
          cp -r results release_package/
          cp build/parallel_nbody release_package/
          cd release_package
          zip -r release_package.zip ./*

      # Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload Release Asset
      - name: Upload Release Package
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release_package/release_package.zip
          asset_name: release_package.zip
          asset_content_type: application/zip
